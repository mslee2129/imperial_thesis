import os
import matplotlib.pyplot as plt
import re
import numpy as np

def moving_average(data, window_size):
    return np.convolve(data, np.ones(window_size)/window_size, mode='valid')

def generate_stats_from_log(experiment_name, line_interval=1000, nb_data=10800, smooth_window=10):
    """
    Generate chart with all losses from log file generated by CycleGAN/Pix2pix/CUT framework
    """
    # Extract every lines
    with open(os.path.join(experiment_name, "loss_log.txt"), 'r') as f:
        lines = f.readlines()
    
    # Choose the lines to use for plotting
    lines_for_plot = []
    for i in range(1, len(lines)):
        if (i-1) % line_interval == 0:
            lines_for_plot.append(lines[i])
    
    # Initialize dict with loss names
    dicts = dict()
    dicts["epoch"] = []
    parts = (lines_for_plot[0]).split(') ')[1].split(' ')
    for i in range(0, len(parts)//2):
        dicts[parts[2*i][:-1]] = []
    
    # Extract all data
    pattern = "epoch: ([0-9]+), iters: ([0-9]+)"
    for l in lines_for_plot:
        search = re.search(pattern, l)
        epoch = int(search.group(1))
        epoch_floatpart = int(search.group(2)) / nb_data
        dicts["epoch"].append(epoch + epoch_floatpart)  # To allow several plots for the same epoch
        parts = l.split(') ')[1].split(' ')
        for i in range(0, len(parts)//2):
            dicts[parts[2*i][:-1]].append(float(parts[2*i+1]))
    
    # Smooth the data using a moving average
    smoothed_epoch = dicts["epoch"][:len(dicts["epoch"]) - smooth_window + 1]
    smoothed_data = {key: moving_average(dicts[key], smooth_window) for key in dicts.keys() if key != "epoch"}
    
    # Plot everything
    plt.figure()
    for key in smoothed_data.keys():
        plt.plot(smoothed_epoch, smoothed_data[key], label=key)
    plt.legend(loc="best")
    plt.title('CGAN Loss with Label Smoothing')
    plt.ylabel('Loss')
    plt.xlabel('Epoch')
    plt.savefig('results/eval/graphs/cgan_loss_ls.png')

generate_stats_from_log('checkpoints/cgan_label_smoothing/')
